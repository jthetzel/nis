%
%\VignetteIndexEntry{The Trapezoidal Distribution}
%\VignetteDepends{trapezoid}
%\VignetteKeywords{distributions}
%\VignettePackage{trapezoid}
\documentclass[11pt]{article}

\usepackage{times}
\usepackage{hyperref}
%\usepackage[authoryear,round]{natbib}
\usepackage{times}
\usepackage{comment}
\usepackage{graphicx}
\usepackage{subfigure}
\usepackage{amsmath}
\usepackage{float}

%\textwidth=6.2in
%\textheight=8.5in
%\oddsidemargin=.1in
%\evensidemargin=.1in
%\headheight=-.3in

%\newcommand{\scscst}{\scriptscriptstyle}
%\newcommand{\scst}{\scriptstyle}
\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Rcode}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textsf{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
%\SweaveOpts{keep.source=TRUE}



\title{nis: Nationwide Inpatient Sample tools for R}
\author{Jeremy Thoms Hetzel}



\begin{document}
\DefineVerbatimEnvironment{Sinput}{Verbatim} {xleftmargin=2em}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{xleftmargin=2em}
\DefineVerbatimEnvironment{Scode}{Verbatim}{xleftmargin=2em}
\fvset{listparameters={\setlength{\topsep}{0pt}}}
\renewenvironment{Schunk}{\vspace{\topsep}}{\vspace{\topsep}}
\hypersetup{
    colorlinks=false,
    pdfborder={0 0 0},
}



<<echo=FALSE>>=
options(width = 70)
options(continue=" ")
@


\maketitle



\section{Introduction}
The Healthcare Cost and Utilization Project's (HCUP) Nationwide Inpatient Sample (NIS) is a stratified sample of approximately 20\% of all community hospital inpatient stays in the United States. The NIS includes data from 1988 until present, with the most recent data from 2009 being made available in May 2011.\cite{HCUP 2009 Introdcution} Each year, the NIS data files contain information on approximately five to eight million patient hospitalizations. These data files include information on patient demographics, diagnoses, procedures, inpatient mortality, payments, as well as hospital demographics. 

The large size of the NIS allows for robust analyses of even rare medical diagnoses and procedures. However, the large size also makes management and analysis of the data non-trivial to researchers unfamiliar with big data. HCUP provides tools for loading and working with the data for the SAS, SPSS, and Stata statistical software packages. However, SAS, SPSS, and Stata, while popular among researchers, are generally closed source, require licensing fees, and may not be available to all researchers. 

R is a programming language and environment for statistical analysis that is both open source and available without licensing fees to all researchers with Internet access. MySQL is a powerful relational database management system, also freely available to all researchers  under the GNU General Public License. The objective of the \Rpackage{nis} package for R is to provide tools and guides to facilitate the analysis of NIS data in the free, open source, and powerful R environment. This first installment of the \Rpackege{nis} package focuses on efficiently loading NIS data into a MySQL database. Future installments will include tools facilitating working with ICD9-CM codes. While the NIS includes data on years 1988 to present, the \Rpackage{nis} package currently only supports years 1998 to present, as the author only has access to these data years. Others with access to the 1988 to 1997 data should feel encouraged to contribute to the \Rpackage{nis} package.

\Section{Creating a MySQL Database for the NIS}
Relational database management systems (RDBMS) provide efficient means to store, query, and access data. The \Rpackage{nis} package provides tools for loading NIS data into a MySQL database, however these methods can be altered if other RDBMSs are preferred, such as PostgreSQL or SQLite. Many tutorials for downloading an installing MySQL are available online, with one example being \cite{}. 

Data for the NIS are provided in fixed-width plain text files with ASCII encoding. Due to changes in file and variable specifications over the years, different rules must be followed when loading data from different years. The \Rpackage{nis} package function \Rfunction{generateSQL()} is designed to facilitate creating SQL code to create tables and load data for the NIS. An example of the SQL code created by the \Rfunction{generateSQL()} function is available at: http://code.google.com/p/nis/examples/sql.sql . For many researchers, simple manual modification of this example SQL code will suffice for loading NIS data into a MySQL database. For those preferring automated generation and finer control, a discussion of the \Rfunciton{generateSQL()} function follows.

Load the \Rpackage(nis) package.
<<require(nis), echo=TRUE, results=verbatim, include=TRUE>>=
## install nis if not already installed:
## install.package('nis')

## load nis package
require(nis)
@

Next, specify the years of the data files and the locations of the core and hospitals data files.
<<specifyYearFiles, echo=TRUE, results=Verbatim, include=TRUE>>
## Specify years
years <- seq(1998, 2009)

## Specify locations of ascii flat files from NIS
## Note: must be in same order as years above
files.core <- c('/data/NIS_1998_Core.ASC',
	'/data/NIS_1999_Core.ASC',
	'/data/NIS_2000_Core.ASC',
	'/data/NIS_2001_Core.ASC',
	'/data/NIS_2002_Core.ASC',
	'/data/NIS_2003_Core.ASC',
	'/data/NIS_2004_Core.ASC',
	'/data/NIS_2005_Core.ASC',
	'/data/NIS_2006_Core.ASC',
	'/data/NIS_2007_Core.ASC',
	'/data/NIS_2008_Core.ASC',
	'/data/NIS_2009_Core.ASC'
)
files.hospitals <- c('/data/NIS_1998_Hospital.ASC',
	'/data/NIS_1999_Hospital.ASC',
	'/data/NIS_2000_Hospital.ASC',
	'/data/NIS_2001_Hospital.ASC',
	'/data/NIS_2002_Hospital.ASC',
	'/data/NIS_2003_Hospital.ASC',
	'/data/NIS_2004_Hospital.ASC',
	'/data/NIS_2005_Hospital.ASC',
	'/data/NIS_2006_Hospital.ASC',
	'/data/NIS_2007_Hospital.ASC',
	'/data/NIS_2008_Hospital.ASC',
	'/data/NIS_2009_Hospital.ASC'
)
@

The \Rfunction{generateSQL()} function requires three arguments. \Rcode{years} specifies the years of data files to generate SQL code for. \Rcode{files} specifies the location of the NIS ASCII fixed-width flat files. \Rcode{type} specifies which type of table to create. Acceptable values for \Rcode{type} include \Rcode{"core"}, \Rcode{"hospitals"}, \Rcode{"severity"}, and \Rcode{"groups"}, for the Core, Hospitals, Severity, and Groups data files, respectively. Note that the \Rcode{years} and \Rcode{files} arguments must be in the same order. For example, \Rcode{years = c(1998, 1999, 2000)} and \Rcode{files = c('NIS_1999_Core.ASC', 'NIS_1999_Core.ASC', 'NIS_2000_Core.ASC')} is correct, but \Rcode{years = c(1998, 1999, 2000)} and \Rcode{files = c('NIS_2000_Core.ASC', 'NIS_1999_Core.ASC', 'NIS_1998_Core.ASC')} is wrong. Also note that Severity data files were not provided prior to 2002, and Groups data files were not provided prior to 2005.

<<generateSQL, echo=TRUE, results=Verbatim, include=TRUE>>
## Generate SQL for core table
core <- generateSQL(years = years, files = files.core, type = "core")

## Generate SQL for hosptials table
hospitals <- generateSQL(years = years, files = files.hospitals, type = "hospitals")
@

The \Rfunction{generateSQL()} connects to the HCUP website (http://www.hcup-us.ahrq.gov) to retrieve layout information on the data files and parses them to create approriate SQL statements. The function returns a list with two objects, \Rcode{createTable}, which has SQL statements to create the appropriate tables, and \Rcode{loadData}, which has SQL statements to load data from the ASCII fixed-width files into the MySQL tables. These statements can be saved to files:

<<catSQL, echo=TRUE, results=Verbatim, include=TRUE>>
## save SQL to a file
cat(core$createTable, file = "nis.sql")
cat(core$loadData, file = "nis.sql", append = T)
cat(hospitals$createTable, file = "nis.sql", append = T)
cat(hospitals$loadData, file = "nis.sql", append = T)
@

The SQL file can then be run from the command line: 
\Rcode{mysql> CREATE DATABASE nis;}
\Rcode{\$ mysql -u root -p nis < nis.sql}
Note that loading data into the core table will take many hours to complete, depending on your system.


\section{Normalization}
Many researchers may find themselves frequently querying the dx1 through dx25 and pr1 through pr15 ICD9-CM diagnosis and procedure variables to identify hospitalizations of interest. From the data files provided by the NIS, this requires running SQL statements that search over all relevant columns, which can lead to complex and slow queries.  For example, a query to select all records with a diagnosis of inflammatory bowel disease would look like:
  SELECT * FROM core WHERE
  core.dx1 IN (5550,5551,5552,5559,5560,5561,5562,5563,5564,5565,5566,5568,5569) OR
  core.dx2 IN (5550,5551,5552,5559,5560,5561,5562,5563,5564,5565,5566,5568,5569) OR
  core.dx3 IN (5550,5551,5552,5559,5560,5561,5562,5563,5564,5565,5566,5568,5569) OR
  core.dx4 IN (5550,5551,5552,5559,5560,5561,5562,5563,5564,5565,5566,5568,5569) OR
  core.dx5 IN (5550,5551,5552,5559,5560,5561,5562,5563,5564,5565,5566,5568,5569) OR
  core.dx6 IN (5550,5551,5552,5559,5560,5561,5562,5563,5564,5565,5566,5568,5569) OR
  core.dx7 IN (5550,5551,5552,5559,5560,5561,5562,5563,5564,5565,5566,5568,5569) OR
  core.dx8 IN (5550,5551,5552,5559,5560,5561,5562,5563,5564,5565,5566,5568,5569) OR
  core.dx9 IN (5550,5551,5552,5559,5560,5561,5562,5563,5564,5565,5566,5568,5569) OR
  core.dx10 IN (5550,5551,5552,5559,5560,5561,5562,5563,5564,5565,5566,5568,5569) OR
  core.dx11 IN (5550,5551,5552,5559,5560,5561,5562,5563,5564,5565,5566,5568,5569) OR
  core.dx12 IN (5550,5551,5552,5559,5560,5561,5562,5563,5564,5565,5566,5568,5569) OR
  core.dx13 IN (5550,5551,5552,5559,5560,5561,5562,5563,5564,5565,5566,5568,5569) OR
  core.dx14 IN (5550,5551,5552,5559,5560,5561,5562,5563,5564,5565,5566,5568,5569) OR
  core.dx15 IN (5550,5551,5552,5559,5560,5561,5562,5563,5564,5565,5566,5568,5569)

An advantage of RDBMSs is the ability to normalize data. The dx* and pr* variables can be moved to single columns in seperate tables and linked back to the core table. Setting the \Rcode{normalize.dx} and \Rcode{normalize.pr} arguments to \Rcode{TRUE} in the \Rfunction{generateSQL()} will generate appropriate CREATE TABLE and LOAD DATA SQL statements for a dx table and pr table.

<<normalizeSQL, echo=TRUE, results=Verbatim, include=TRUE>>
## Generate SQL for core table
core <- generateSQL(years = years, files = files.core, type = "core", normalize.dx = T, normalize.pr = T)
cat(core$createTable, file = "normalizeCore.sql")
cat(core$loadData, file = "normalizeCore.sql", append = T)
@

Which can then be executed by \Rcode{\$ mysql -u root -p nis < normalize.sql}. Once finished, the inflammatory bowel disease records can be selected by:
  SELECT core.*, dx.* 
  FROM core, dx 
  WHERE dx.icd9 IN (5550,5551,5552,5559,5560,5561,5562,5563,5564,5565,5566,5568,5569)
  AND dx.`key` = core.`key`;
  
\section{Indexes}




The probability density function of the generalized trapezoidal distribution with parameters \begin{math}a, b, c, d, m, n, \text{ and } \alpha \end{math} is given by:
  \begin{displaymath}
    f{\scriptscriptstyle X}(x\mid\theta) = \mathcal{C}(\Theta) \times
      \begin{cases}
        \alpha \left(\frac{x - \alpha}{b - \alpha} \right)^{m - 1}, & \text{for } a \leq x < b \\
        (1 - \alpha) \left(\frac{x - b}{c - b} \right) + \alpha, & \text{for } b \leq x < c \\
        \left(\frac{d - x}{d - c} \right)^{n-1}, & \text{for } c \leq x \leq d
       \end{cases}
  \end{displaymath}

\noindent with the normalizing constant \begin{math}\mathcal{C}(\Theta)\end{math} defined as:
  \begin{displaymath}
    \mathcal{C}(\Theta) = 
      \frac{2mn}
        {2 \alpha \left(b - a\right) n + 
          \left(\alpha + 1 \right) \left(c - b \right)mn +
          2 \left(d - c \right)m}
    \end{displaymath} 

\noindent and where the parameter vector \begin{math} \Theta = \{a, b, c, d, m, n, \alpha \}, a \leq b \leq c \leq d, \text{ and } m, n, \alpha >0 \end{math}. 

The \Rpackage{trapezoid} package provides functions for the probability density function (\Rfunction{dtrapezoid}), cumulative distribution function (\Rfunction{ptrapezoid}), quantile function (\Rfunction{qtrapezoid}), and random generation (\Rfunction{rtrapezoid}). The parameters \begin{math}a, b, c, d, m, n, \text{ and } \alpha \end{math} are specified by the arguments \Rcode{min}, \Rcode{mode1}, \Rcode{mode2}, \Rcode{max}, \Rcode{n1}, \Rcode{n3}, and \Rcode{alpha}, respectively. The argument names were chosen to avoid conflicts with names that commonly have specific meaning in R functions, such as \Rcode{c} and \Rcode{n}.



\section{Examples}
\subsection{Trapezoid}
The generalized trapezoidal distribution simplifies to the trapezoidal distribution when \begin{math} m = n = 2 \text{ and } \alpha = 1\end{math}. 

<<trapezoid, echo=TRUE, results=verbatim, fig=TRUE, include=FALSE>>=
# ggplot2 is required for these examples
require(trapezoid)
require(ggplot2)

# Trapezoid
x <- seq(from = 0, to = 1, by = 0.01)	
density <- dtrapezoid(x, min = 0, mode1 = 1/3, mode2 = 2/3, max = 1,
	n1 = 2, n3 = 2, alpha = 1)
trapezoid <- ggplot(data = data.frame(x, density), 
		aes(x = x, y = density)) + geom_line() + theme_bw()
print(trapezoid)
@
\begin{figure}[H]
\centering
\caption{A trapezoidal distribution.}
\includegraphics{trapezoid-trapezoid}
\end{figure}



\subsection{Triangle}
The trapezoidal distribution further simplifies to the triangular distribution when \begin{math} b = c\end{math}. 

<<triangle, echo=TRUE, results=verbatim, fig=TRUE, include=FALSE>>=
# Triangle
x <- seq(from = 0, to = 1, by = 0.01)	
density <- dtrapezoid(x, min = 0, mode1 = 1/2, mode2 = 1/2, max = 1,
	n1 = 2, n3 = 2, alpha = 1)
triangle <- ggplot(data = data.frame(x, density), 
				aes(x = x, y = density)) + geom_line() + theme_bw()
print(triangle)
@
\begin{figure}[H]
\centering
\caption{A triangular distribution.}
\includegraphics{trapezoid-triangle}
\end{figure}


\subsection{Generalized trapezoidal distribution}
Parameters \begin{math}m, n, \text{ and } \alpha \end{math} control the growth rate, decay rate, and boundary ratio, respectively, of the distribution. In the \Rpackage{trapezoid} package, these parameters are controlled by the \Rcode{n1}, \Rcode{n3}, and \Rcode{alpha} arguments. To demonstrate the effects of these three parameters, van Dorp and Kotz\cite{VanDorp2003} generated eight distributions with varying parameter values. The distributions are approximately re-generated here.

<<generalizedTrapezoids, echo=TRUE, results=verbatim, fig=TRUE, include=FALSE, height=8>>=
# Generalized trapezoidal distributions
x <- seq(from = 0, to = 1, by = 0.01)	

# Create a lists of arguments, varying n1, n3, and alpha
arguments <- list()
arguments[['A']] <- list(x = x, n1 = 2, n3 = 2, alpha = 0.8)
arguments[['B']] <- list(x = x, n1 = 1.5, n3 = 1.5, alpha = 1)
arguments[['C']] <- list(x = x, n1 = 2.5, n3 = 2.5, alpha = 1.5)
arguments[['D']] <- list(x = x, n1 = 1.5, n3 = 2.5, alpha = 0.5)
arguments[['E']] <- list(x = x, n1 = 2.5, n3 = 1.5, alpha = 1)
arguments[['F']] <- list(x = x, n1 = 0.5, n3 = 0.5, alpha = 1.5)
arguments[['G']] <- list(x = x, n1 = 1.5, n3 = 0.5, alpha = 0.5)
arguments[['H']] <- list(x = x, n1 = 2.5, n3 = 0.5, alpha = 1)
arguments[['I']] <- list(x = x, n1 = 0.5, n3 = 1.5, alpha = 1.5)
arguments[['J']] <- list(x = x, n1 = 0.5, n3 = 2.5, alpha = 0.5)

# Calculate the distributions
plot.data <- ldply(arguments, function(z)
	{
		x <- z$x
		density <- dtrapezoid(x = z$x, min = 0, mode1 = 0.2, mode2 = 0.8,
			max = 1, n1 = z$n1, n3 = z$n3, alpha = z$alpha)
		args <- paste("n1 = ", z$n1, ", n3 = ", z$n3, ", alpha = ", z$alpha, 
			sep="", collapse="")
		out <- data.frame(x, density, args)
	})

# Create labels for later use in displaying the arguments on the plots 
plot.data$label <- paste(plot.data$.id, ": ", plot.data$args, sep="")

# Create plots
generalizedTrapezoids <- ggplot(data = plot.data, aes(x = x, y = density)) + 
		geom_line() + theme_bw() + 
		facet_wrap(~label, ncol = 2, scales = "free_y")
print(generalizedTrapezoids)
@
\begin{figure}[H]
\centering
\caption{Examples of generalized trapezoidal distributions.}
\includegraphics{trapezoid-generalizedTrapezoids}
\end{figure}


\bibliographystyle{plain}
\bibliography{trapezoid}

\end{document}



